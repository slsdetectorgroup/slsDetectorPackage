name: Native CMake Build

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    name: Configure and build using cmake
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'
      - run: pip install pytest

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libhdf5-dev qtbase5-dev qt5-qmake libqt5svg5-dev libpng-dev libtiff-dev
          version: 1.0

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSLS_USE_TESTS=ON -DSLS_USE_HDF5=ON -DSLS_USE_GUI=ON -DSLS_USE_MOENCH=ON -DSLS_USE_PYTHON=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build -j2 --config ${{env.BUILD_TYPE}}

      - name: C++ unit tests
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} -j1

      - name: Python unit tests
        working-directory: ${{github.workspace}}
        run: |
          # Activate the Python virtual environment
          source ${{github.workspace}}/venv/bin/activate
          python -m pytest python/tests


